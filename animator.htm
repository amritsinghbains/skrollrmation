<!DOCTYPE html>
<html ng-app="openScrollAnimator" ng-controller="osaController">
<head>
 <title>Easy Skrollr Animate</title>
 <link rel="stylesheet" type="text/css" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
 <link rel="stylesheet" type="text/css" href="third-party/sweet-alert.css">
 <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
 <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>
 <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular.min.js"></script>

 <script src="third-party/localforage.min.js"></script>
 <script src="third-party/angular-localForage.min.js"></script>
 <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
 <script src="third-party/sortable.js"></script>
 <script src="third-party/angular-uuid4.js"></script>
 <script src="third-party/skrollr.min.js"></script>
 <script src="third-party/sweet-alert.min.js"></script>
 <script src="third-party/FileSaver.min.js"></script>

 <style>
  div.project-header
  {
    position: fixed;
    width: 2.5em;
    height: 100%;
    background-image: linear-gradient(to right, white, gray);
    padding: 5px;
    opacity: 0.7;
  }

  div.project-header h2
  {
    transform: rotate(90deg);
    width: 100%;
    white-space: nowrap;
    transform-origin: left bottom 0;
    font-size: 1.4em;
  }

  #controls-main
  {
    position:fixed;
    top:0;
    left: 2.5em;
    opacity: 0.7;
    padding-left: 2px;
  }

  a.create-item
  {
    font-size: 85%;
    color: rgb(128, 10, 20);
  }

  #element-keyframe
  {
    overflow-x: scroll;
    overflow-y: scroll;
    width: 100%;
    position: fixed;
    bottom: 0;
    left: 2.5em;
    min-height: 200px;
    white-space: nowrap;
    opacity: 0.7;
  }

  h4.rot90
  {
    transform: rotate(90deg);
    width: 100%;
    white-space: nowrap;
    transform-origin: left bottom 0;
    font-size: 1.1em;
    padding-left: 5px;
    padding-bottom: 3px;
  }

  div.kf-data
  {
    display: inline-block;
    border: 0px solid gray;
    height: 100%;
    margin: 0 2px 0 2px;
    width: 2em;
  }

  h4.kf-data-expanded
  {
    transform: none !important;
  }

  div.kf-data-expanded
  {
    width: 12em !important;
    border: 1px solid gray !important;
  }

  div.kf-data-expanded > div
  {
    white-space: normal;
  }

  .actual-data
  {
   display:table-cell;
   padding: 5px;
  }

  .tag-cloud a
  {
    font-size: 85%;
    color: rgb(128, 10, 20);
  }

  .actual-data p
  {
    font-size: 85%;
    margin: 0 2px 0 0;
  }

  span.highlight
  {
    color: red !important;
  }

  span.handle
  {
    cursor:move;
  }

  .nowrap-cls
  {
    white-space: nowrap;
  }

  .ptr-cursor
  {
    cursor:pointer;
  }

  .kf-data-item-cls
  {
    width: 80%;
  }

  .destroy-data
  {
    cursor: pointer;
    font-size: 110%;
  }

  #current-scene, #skrollr-container
  {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }

  #current-scene img
  {
    position: absolute;
  }
 </style>
</head>

<body>

<div ng-cloak>
 <div class="project-header">
  <h2>
  <button ng-click="renderSkrollr()" ng-show="currentProject && !renderMode" class="btn btn-primary btn-xs">
   <span class="glyphicon glyphicon-picture"></span> Render
  </button>

  <button ng-click="renderMode = false" ng-show="renderMode" class="btn btn-primary btn-xs">
   <span class="glyphicon glyphicon-edit"></span> Edit
  </button>

  <button ng-click="showErrorsTab()" ng-show="osaErrors.length && renderMode" class="btn btn-danger btn-xs">
   <span class="glyphicon glyphicon-warning-sign"></span> Errors
  </button>

  <button ng-click="saveRender()" ng-show="renderMode" class="btn btn-primary btn-xs">
   <span class="glyphicon glyphicon-floppy-disk"></span> Save
  </button>

  <span ng-show="currentProject">{{currentProject.name}}</span>
  <span ng-hide="currentProject">No project open</span>
  <span ng-show="currentScene">&gt; {{currentScene.name}}</span>
  <span ng-show="currentElement">&gt; {{currentElement.name}}</span>
  </h2>
 </div>

 <div id="controls-main" ng-hide="renderMode">

 <ul class="nav nav-tabs" role="tablist">

  <li class="active">
   <a href="#project-menu-tab" role="tab" data-toggle="tab">
    Projects <span class="badge">{{osaProjects.length}}</span>
   </a>
  </li>

  <li>
   <a href="#scene-menu-tab" role="tab" data-toggle="tab">
    Scenes <span class="badge">{{currentProject ? osaScenes[currentProject.id].length : 0}}
   </a>
  </li>

  <li>
   <a href="#keyframe-menu-tab" role="tab" data-toggle="tab">
    Keyframes <span class="badge">{{currentScene ? osaKeyframes[currentScene.id].length : 0}}</span>
   </a>
  </li>

  <li>
   <a href="#element-menu-tab" role="tab" data-toggle="tab">
    Images <span class="badge">{{currentScene ? osaElements[currentScene.id].length : 0}}</span>
   </a>
  </li>

  <li>
   <a href="#error-menu-tab" role="tab" data-toggle="tab">
    Errors <span class="badge">{{osaErrors.length}}</span>
   </a>
  </li>

  <li>
   <a href="#collaborate-menu-tab" role="tab" data-toggle="tab">
    Collaborate
   </a>
  </li>

  <li>
   <a href="#about-menu-tab" role="tab" data-toggle="tab">
    About / Help
   </a>
  </li>

 </ul>

 <div class="tab-content">

 <div class="tab-pane active" id="project-menu-tab">

 <div id="project-menu">

  <table class="table table-condensed table-bordered table-striped">

  <tbody>
    <tr><th>Order</th><th>Name</th><th>Load</th><th>Delete</th></tr>
  </tbody>

  <tbody ui-sortable="{ handle : '.handle' }" ng-model="osaProjects">
   <tr ng-repeat="pject in osaProjects">
     <td><span class="handle"><span class="glyphicon glyphicon-sort"></span></span></td>
     <td><input type="text" ng-model="pject.name" placeholder="Project Name"></td>
     <td><button class="btn btn-sm btn-success" ng-click="loadProject(pject)">Load</button></td>
     <td><button class="btn btn-sm btn-danger" ng-click="deleteProject($index, pject.id)">Delete</button></td>
   </tr>
  </tbody>

  <tbody>
    <tr><td colspan="4"><a href="#" class="create-item" ng-click="createProject()">Create project here</a></td></tr>
  </tbody>
  </table>
 </div>

 </div><!-- End project menu tab -->

  <div class="tab-pane" id="scene-menu-tab">

  <div id="scene-menu">

  <table class="table table-condensed table-bordered table-striped">

  <tbody>
    <tr><th>Order</th><th>Name</th><th>Load</th><th>Delete</th></tr>
  </tbody>

  <tbody ui-sortable="{ handle : '.handle' }" ng-model="osaScenes[currentProject.id]">
   <tr ng-repeat="scene in osaScenes[currentProject.id]">
     <td><span class="handle"><span class="glyphicon glyphicon-sort"></span></span></td>
     <td><input type="text" ng-model="scene.name" placeholder="Scene Name"></td>
     <td><button class="btn btn-sm btn-success" ng-click="loadScene(scene)">Load</button></td>
     <td><button class="btn btn-sm btn-danger" ng-click="deleteScene($index, scene.id)">Delete</button></td>
   </tr>
  </tbody>

  <tbody>
    <tr ng-show="currentProject"><td colspan="4"><a href="#" class="create-item" ng-click="createScene()">Create scene here</a></td></tr>
    <tr ng-hide="currentProject"><td colspan="4">Please load a project to view &amp; create scenes</td></tr>
  </tbody>
  </table>
 </div>

  </div><!-- End scene menu tab -->

  <div class="tab-pane" id="keyframe-menu-tab">

  <div id="keyframe-menu">

  <table class="table table-condensed table-bordered table-striped">

  <tbody>
    <tr><th>Order</th><th>Name</th><th>Position</th><th>Delete</th></tr>
  </tbody>

  <tbody ui-sortable="{ handle : '.handle' }" ng-model="osaKeyframes[currentScene.id]">
   <tr ng-repeat="kf in osaKeyframes[currentScene.id]">
     <td><span class="handle"><span class="glyphicon glyphicon-sort"></span></span></td>
     <td><input type="text" ng-model="kf.name" placeholder="Keyframe name"></td>
     <td><input type="number" min="0" ng-model="kf.position" placeholder="Keyframe scroll position"></td>
     <td><button class="btn btn-sm btn-danger" ng-click="deleteKeyframe($index, kf.id)">Delete</button></td>
   </tr>
  </tbody>

  <tbody>
    <tr ng-show="currentScene"><td colspan="4"><a href="#" class="create-item" ng-click="createKeyframe()">Create keyframe here</a></td></tr>
    <tr ng-hide="currentScene"><td colspan="4">Please load a scene to view &amp; create keyframes</td></tr>
  </tbody>
  </table>
 </div>

  </div><!-- End keyframe menu tab -->

  <div class="tab-pane" id="element-menu-tab">

  <div id="element-menu">

  <table class="table table-condensed table-bordered table-striped">

  <tbody>
    <tr><th>Order</th><th>Name</th><th>Load</th><th>Delete</th></tr>
  </tbody>

  <tbody ui-sortable="{ handle : '.handle' }" ng-model="osaElements[currentScene.id]">
   <tr ng-repeat="elem in osaElements[currentScene.id]">
     <td><span class="handle"><span class="glyphicon glyphicon-sort"></span></span></td>
     <td><input type="text" ng-model="elem.name" placeholder="Image name"></td>
     <td><button class="btn btn-sm btn-success" ng-click="loadElement(elem)">Load</button></td>
     <td><button class="btn btn-sm btn-danger" ng-click="deleteElement($index, elem.id)">Delete</button></td>
   </tr>
  </tbody>

  <tbody>
    <tr ng-show="currentScene"><td colspan="4"><a href="#" class="create-item" ng-click="createElement()">Create image here</a></td></tr>
    <tr ng-hide="currentScene"><td colspan="4">Please load a scene to view &amp; create images</td></tr>
  </tbody>
  </table>
 </div>

  </div><!-- End element menu tab -->

  <div class="tab-pane" id="error-menu-tab">
  <div id="error-menu">
  <table class="table table-condensed table-bordered table-striped">
    <tbody>
     <tr><th>Error</th><th>Property</th><th>Element</th><th>Scene</th></tr>
    </tbody>

    <tbody>
      <tr class="danger" ng-repeat="err in osaErrors"><td>{{err.text}}</td><td>{{err.tag}}</td><td>{{err.element}}</td><td>{{err.scene}}</td></tr>
    </tbody>

    <tbody>
      <tr class="success" ng-hide="osaErrors.length"><td colspan="4">No errors at last render!</td></tr>
    </tbody>
  </table>
  </ul>
  </div>
  </div><!-- End error menu tab -->

  <div class="tab-pane" id="collaborate-menu-tab">
  <div id="collaborate-menu">
   <table class="table">   
    <tr ng-show="currentProject"><td><input type="text" placeholder="Save note" ng-model="saveNote"></td><td><button class="btn btn-xl btn-primary" ng-click="saveJSON()">Save to JSON format</button></td></tr>
    <tr><td><input type="file" id="load-file-box"></td><td><button class="btn btn-xl btn-primary" ng-click="loadJSON()">Load from JSON format</button></td></tr>
   </table>
  </div>
  </div><!-- End collaborate menu tab -->

  <div class="tab-pane" id="about-menu-tab">
  <div id="about-menu">

  </div>
  </div><!-- End about menu tab -->

</div><!-- End tab content -->
</div><!-- End controls-main -->

<div id="element-keyframe" ng-show="currentElement && !renderMode">
 <div class="kf-data" ng-class="{ 'kf-data-expanded' : osaElementKeyframeData[currentElement.id]['c'].isOpen }">

  <h4 class="rot90" ng-class="{ 'kf-data-expanded' : osaElementKeyframeData[currentElement.id]['c'].isOpen }">
    <span ng-click="applyStyles('c')" ng-class="{ highlight : currentKeyframeId == 'c' }" class="glyphicon glyphicon-search ptr-cursor"></span>
    <a href="#" ng-click="createData('c')">Constants</a>
  </h4>

  <div class="actual-data" ng-show="osaElementKeyframeData[currentElement.id]['c'].isOpen">
   <span class="tag-cloud">
     <span ng-repeat="tag in tags">
     <a ng-hide="osaElementKeyframeData[currentElement.id]['c'].hasData[tag.name]"
        ng-click="osaElementKeyframeData[currentElement.id]['c'].hasData[tag.name] = true"
        href="#">{{tag.name}}</a>
     </span>
     <span ng-repeat="tag in constants">
     <a ng-hide="osaElementKeyframeData[currentElement.id]['c'].hasData[tag.name]"
        ng-click="osaElementKeyframeData[currentElement.id]['c'].hasData[tag.name] = true"
        href="#">{{tag.name}}</a>
     </span>
   </span>

   <span ng-repeat="tag in tags">
     <p ng-show="osaElementKeyframeData[currentElement.id]['c'].hasData[tag.name]">{{tag.placeholder}}</p>
     <p class="nowrap-cls" ng-show="osaElementKeyframeData[currentElement.id]['c'].hasData[tag.name]">

        <input class="kf-data-item-cls"
               type="number"
               min="{{tag.min}}"
               max="{{tag.max}}"
               step="{{tag.step ? tag.step : 1}}"
               ng-model="osaElementKeyframeData[currentElement.id]['c'][tag.name]"
               placeholder="{{tag.placeholder}}"
               ng-change="applyStyles('c')">

        <span class="destroy-data" ng-click="destroyData('c', tag)">&times;</span>
     </p>
   </span>
   <span ng-repeat="tag in constants">
     <p ng-show="osaElementKeyframeData[currentElement.id]['c'].hasData[tag.name]">{{tag.placeholder}}</p>
     <p class="nowrap-cls" ng-show="osaElementKeyframeData[currentElement.id]['c'].hasData[tag.name]">

        <input class="kf-data-item-cls"
               type="text"
               ng-model="osaElementKeyframeData[currentElement.id]['c'][tag.name]"
               placeholder="{{tag.placeholder}}"
               ng-blur="applyStyles('c')">

        <span class="destroy-data" ng-click="destroyData('c', tag)">&times;</span>
     </p>
   </span>
  </div>
 </div><!-- End kf-data item -->

 <div class="kf-data" ng-repeat="kf in osaKeyframes[currentScene.id]" ng-class="{ 'kf-data-expanded' : osaElementKeyframeData[currentElement.id][kf.id].isOpen }">

  <h4 class="rot90" ng-class="{ 'kf-data-expanded' : osaElementKeyframeData[currentElement.id][kf.id].isOpen }">
    <span ng-click="applyStyles(kf.id)" ng-class="{ highlight : currentKeyframeId == kf.id }" class="glyphicon glyphicon-search ptr-cursor"></span>
    <a href="#" ng-click="createData(kf.id)">{{kf.name}} @ {{kf.position}}</a>
  </h4>

  <div class="actual-data" ng-show="osaElementKeyframeData[currentElement.id][kf.id].isOpen">
   <span class="tag-cloud">
     <span ng-repeat="tag in tags">
     <a ng-hide="osaElementKeyframeData[currentElement.id][kf.id].hasData[tag.name]"
        ng-click="osaElementKeyframeData[currentElement.id][kf.id].hasData[tag.name] = true"
        href="#">{{tag.name}}</a>
     </span>
   </span>

   <span ng-repeat="tag in tags">
     <p ng-show="osaElementKeyframeData[currentElement.id][kf.id].hasData[tag.name]">{{tag.placeholder}}</p>
     <p class="nowrap-cls" ng-show="osaElementKeyframeData[currentElement.id][kf.id].hasData[tag.name]">
       <input class="kf-data-item-cls"
              type="number"
              min="{{tag.min}}"
              max="{{tag.max}}"
              step="{{tag.step ? tag.step : 1}}"
              ng-model="osaElementKeyframeData[currentElement.id][kf.id][tag.name]"
              placeholder="{{tag.placeholder}}"
              ng-change="applyStyles(kf.id)">

       <span class="destroy-data" ng-click="destroyData(kf.id, tag)">&times;</span>
     </p>
   </span>
  </div>
 </div><!-- End kf-data item -->
</div><!-- End element-keyframe content -->

 <div id="current-scene" ng-hide="renderMode">
  <img ng-repeat="elem in osaElements[currentScene.id]" id="{{elem.id}}">
 </div>

 <div id="skrollr-container" ng-show="renderMode"></div>

<script>
/*
TODO:
5. Split js to separate file.
6. Testing.
13. Make sure scroll of projects, scenes, etc works, when exceeding maximum height of page.
14. Add meta generator or link to saved file.
15. Find all TODO's in code.
16. Load sample data.
*/

  var app = angular.module('openScrollAnimator', ['LocalForageModule', 'ui.sortable', 'uuid4']);

  app.controller('osaController', ['$scope', '$q', '$localForage', 'uuid4', '$log', function($scope, $q, $localForage, uuid4, $log) {

    $scope.osaProjects = [];
    $scope.osaScenes = {};              /* Keyed by project.id */
    $scope.osaKeyframes = {};           /* Keyed by scene.id */
    $scope.osaElements = {};            /* Keyed by scene.id */
    $scope.osaElementKeyframeData = {}; /* Keyed by element.id */
    $scope.osaErrors = [];

    $scope.tags = [
      { "name" : 'top', "placeholder" : 'Top (px)', "unit" : 'px' },
      { "name" : 'left', "placeholder" : 'Left (px)', "unit" : 'px' },
      { "name" : 'width', "placeholder" : 'Width (px)', "unit" : 'px' },
      { "name" : 'height', "placeholder" : 'Height (px)', "unit" : 'px' },
      { "name" : 'opacity', "placeholder" : 'Opacity (0.0 to 1.0)', "unit" : '', "min" : 0, "max" : 1, "step" : 0.1 },
      { "name" : 'rotate', "placeholder" : 'Rotate (deg)', "unit" : 'deg', "isTransform" : true },
      { "name" : 'skewX', "placeholder" : 'Skew X (deg)', "unit" : 'deg', "isTransform" : true },
      { "name" : 'skewY', "placeholder" : 'Skew Y (deg)', "unit" : 'deg', "isTransform" : true },
      { "name" : 'z-index', "placeholder" : 'z-index', "unit" : '' }
    ];

    $scope.constants = [
      { "name" : 'src', "placeholder" : 'Image Src (url)', "unit" : '', "isAttr" : true },
      { "name" : 'alt', "placeholder" : 'Image Alt Text', "unit" : '', "isAttr" : true }
    ];

    $scope.allTags = $scope.tags.concat($scope.constants);

    $scope.renderMode = false;
    $scope.saveNote = '';

    $scope.currentProject = null;
    $scope.currentScene = null;
    $scope.currentElement = null;
    $scope.currentKeyframeId = null;

    $localForage.bind($scope, 'osaProjects');

    $scope.realDeleteElement = function(sceneId, elemId) {

        /* Remove any associated keyframe data. */
        if ($scope.osaElementKeyframeData[elemId])
          delete $scope.osaElementKeyframeData[elemId];

        /* Remove from the in-memory list of elements. */
        if ($scope.osaElements[sceneId]) {
         $.each($scope.osaElements[sceneId], function(idx, elem) {
            if (elem.id == elemId)
              $scope.osaElements[sceneId].splice(idx, 1);
         });
        }

        /* Remove any associated keyframe data from local storage. */
        $localForage.removeItem('osaData-' + elemId);

        if ($scope.currentElement.id == elemId)
          $scope.currentElement = null;
    };

    $scope.realDeleteKeyframe = function(sceneId, keyframeId) {
        /* Remove from the in-memory list of keyframes. */
        if ($scope.osaKeyframes[sceneId]) {
         $.each($scope.osaKeyframes[sceneId], function(idx, kf) {
            if (kf.id == keyframeId)
              $scope.osaKeyframes[sceneId].splice(idx, 1);
         });
        }

        if ($scope.currentKeyframeId == keyframeId)
          $scope.currentKeyframeId = null;
    };

    $scope.realDeleteScene = function(projectId, sceneId) {
         /* Remove associated elements. */
         $localForage.getItem('osaElements-' + sceneId).then(function(elems) {
           $.each(elems, function(idx, elem) {
             $scope.realDeleteElement(sceneId, elem.id);
           });
         });

         /* Remove associated keyframes. */
         $localForage.getItem('osaKeyframes-' + sceneId).then(function(kfs) {
           $.each(kfs, function(idx, kf) {
             $scope.realDeleteKeyframe(sceneId, kf.id);
           });
         });

         /* Remove lists from memory. */
         delete $scope.osaElements[sceneId];
         delete $scope.osaKeyframes[sceneId];

         /* Remove lists from storage. */
         $localForage.removeItem('osaKeyframes-' + sceneId);
         $localForage.removeItem('osaElements-' + sceneId);

         /* Finally if, the parent project is loaded, this will remove it from the scenes list on screen. */
         if ($scope.osaScenes[projectId])
         {
           $.each($scope.osaScenes[projectId], function(idx, scene) {
             if (scene.id == sceneId)
               $scope.osaScenes[projectId].splice(idx, 1);
           });
         }

         if ($scope.currentScene.id == sceneId)
           $scope.currentScene = null;
    };

    $scope.realDeleteProject = function(projectId) {
      $localForage.getItem('osaScenes-' + projectId).then(function(scenes) {

        /* Remove associated scenes. */
        $.each(scenes, function(idx, scene) {
          $scope.realDeleteScene(projectId, scene.id);
        });

        $localForage.removeItem('osaScenes-' + projectId);
      });

      if ($scope.osaProjects)
      {
        /* Remove from memory list. */
        $.each($scope.osaProjects, function(idx, project) {
          if (project.id == projectId)
            $scope.osaProjects.splice(idx, 1);
        });
      }

      if ($scope.currentProject.id == projectId)
        $scope.currentProject = null;
    };

    $scope.deleteProject = function(idx, id) {
      swal( { "title" : 'Delete Project Confirmation',
              "text" : 'Are you sure you wish to delete an entire project?',
              "showCancelButton" : true,
              "confirmButtonClass" : 'btn-danger',
              "type" : 'warning' }, function() {
        if ($scope.osaProjects[idx].id === id) /* Sanity test. */ {
          $scope.realDeleteProject(id);
          $scope.$apply(); /* This seems to be needed. */
        }
      });
    };

    $scope.createProject = function() {
      var id = uuid4.generate();
      $scope.osaProjects.push({ "id" : id });
      $localForage.bind($scope, { "key" : 'osaScenes-' + id, "scopeKey" : 'osaScenes[\'' + id + '\']', "defaultValue" : [] });
    };

    $scope.loadProject = function(project) {
      $scope.currentKeyframeId = null;
      $scope.currentElement = null;
      $scope.currentScene = null;
      $scope.currentProject = project;

      $scope.loadProjectIntoMemory(project);
    };

    $scope.createScene = function() {
      var id = uuid4.generate();
      $scope.osaScenes[$scope.currentProject.id].push({ "id" : id });
      $localForage.bind($scope, { "key" : 'osaKeyframes-' + id, "scopeKey" : 'osaKeyframes[\'' + id + '\']',  "defaultValue" : [] });
      $localForage.bind($scope, { "key" : 'osaElements-' + id, "scopeKey" : 'osaElements[\'' + id + '\']',  "defaultValue" : [] });
    };

    $scope.deleteScene = function(idx, id) {
      swal( { "title" : 'Delete Scene Confirmation',
              "text" : 'Are you sure you wish to delete an entire scene?',
              "showCancelButton" : true,
              "confirmButtonClass" : 'btn-danger',
              "type" : 'warning' }, function() {
        if ($scope.osaScenes[$scope.currentProject.id][idx].id === id) {
          $scope.realDeleteScene($scope.currentProject.id, id);
          $scope.$apply();
        }
     });
    };

    $scope.loadScene = function(scene) {
      $scope.currentKeyframeId = null;
      $scope.currentElement = null;
      $scope.currentScene = scene;
    };

    $scope.createKeyframe = function() {
      var id = uuid4.generate();
      $scope.osaKeyframes[$scope.currentScene.id].push({ "id" : id });
    };

    $scope.deleteKeyframe = function(idx, id) {
      swal( { "title" : 'Delete Keyframe Confirmation',
              "text" : 'Are you sure you wish to delete this keyframe?',
              "showCancelButton" : true,
              "confirmButtonClass" : 'btn-danger',
              "type" : 'warning' }, function() {
        if ($scope.osaKeyframes[$scope.currentScene.id][idx].id === id) {
          $scope.realDeleteKeyframe($scope.currentScene.id, id);
          $scope.$apply();
        }
      });
    };

    $scope.createElement = function() {
      var id = uuid4.generate();
      $scope.osaElements[$scope.currentScene.id].push({ "id" : id });
      $scope.osaElementKeyframeData[id] = {};
      $localForage.bind($scope, { key : 'osaData-' + id, scopeKey: 'osaElementKeyframeData[\'' + id + '\']', "defaultValue" : {} });
    };

    $scope.deleteElement = function(idx, id) {
      swal( { "title" : 'Delete Image Confirmation',
              "text" : 'Are you sure you wish to delete this image?',
              "showCancelButton" : true,
              "confirmButtonClass" : 'btn-danger',
              "type" : 'warning' }, function() {
        if ($scope.osaElements[$scope.currentScene.id][idx].id === id) {
          $scope.realDeleteElement($scope.currentScene.id, id);
          $scope.$apply();
        }
      });
    };

    $scope.loadElement = function(elem) {
      $scope.currentElement = elem;
    };

    $scope.createData = function(kfId) {
     if (angular.isDefined($scope.osaElementKeyframeData[$scope.currentElement.id][kfId])) {
         $scope.osaElementKeyframeData[$scope.currentElement.id][kfId].isOpen = !$scope.osaElementKeyframeData[$scope.currentElement.id][kfId].isOpen;
     }
     else {
       $scope.osaElementKeyframeData[$scope.currentElement.id][kfId] = { "id" : uuid4.generate(), "hasData" : {}, "isOpen" : true };
     }
    };

    $scope.destroyData = function(kfId, tag) {
      $scope.osaElementKeyframeData[$scope.currentElement.id][kfId].hasData[tag.name] = false;
      $scope.applyStyles(kfId);
    };

    $scope.applyStylesInternal = function(elem, kfId, kkfId, item, transforms) {

          if (angular.isDefined($scope.osaElementKeyframeData[elem.id][kfId]) &&
              $scope.osaElementKeyframeData[elem.id][kfId].hasData[item.name]) {
            var key = item.name;
            var value = $scope.osaElementKeyframeData[elem.id][kfId][item.name];

            if (item.isTransform) {
               transforms += item.name + '(' + value + item.unit + ') ';
            }
            else if (item.isAttr) {
               $('#' + elem.id).attr(item.name, value);
            }
            else {
               value = value + item.unit;
               $('#' + elem.id).css(key, value);
            }
          }

          return transforms;
    };

    $scope.applyStyles = function(kfId /* Which keyframe to stop at? */) {

      $scope.currentKeyframeId = kfId;

      /* First clear existing styles and attributes. */
      $.each($scope.osaElements[$scope.currentScene.id], function(idx, elem) {
       $.each($scope.allTags, function(idx, item) {
         if (item.isTransform)
          $('#' + elem.id).css('transform', '');
         else if (item.isAttr)
          $('#' + elem.id).attr(item.name, '');
         else
          $('#' + elem.id).css(item.name, '');
       });
      });

      /* Then loop through all the elements in the scene. */
      $.each($scope.osaElements[$scope.currentScene.id], function(idx, elem) {

        /* Apply the constant styles first. */
        $.each($scope.allTags, function(idx, item) {
          $scope.applyStylesInternal(elem, 'c', 'c', item);
        });

        if (kfId != 'c')
        {
         /* Apply the styles for other keyframes, stopping at kfId. */
         $.each($scope.osaKeyframes[$scope.currentScene.id], function(idx, kkf) {
          var transforms = '';
          $.each($scope.allTags, function(idx, item) {
            transforms = $scope.applyStylesInternal(elem, kkf.id, kfId, item, transforms);
          });

         if (transforms.length > 0)
           $('#' + elem.id).css('transform', transforms);

          if (kkf.id == kfId)
           return false;
         });
        }
      });
    };

    $scope.renderSkrollr = function() {
      $scope.realRender($scope.osaScenes[$scope.currentProject.id]);
    };

    /* This function loads all the scenes, keyframes, elements and element keyframe data into memory
     * for the given project. */
    $scope.loadProjectIntoMemory = function(project) {

     $localForage.bind($scope, { key : 'osaScenes-' + project.id, scopeKey: 'osaScenes[\'' + project.id + '\']' });

     $localForage.getItem('osaScenes-' + project.id).then(function(scenesM) {
       /* Iterate over all the scenes in the project. */
       $.each(scenesM, function(idx, scene) {
         $localForage.bind($scope, { key : 'osaKeyframes-' + scene.id, scopeKey: 'osaKeyframes[\'' + scene.id + '\']' });
         $localForage.bind($scope, { key : 'osaElements-' + scene.id, scopeKey: 'osaElements[\'' + scene.id + '\']' });

         /* Iterate over all the elements in the scene. */
         $localForage.getItem('osaElements-' + scene.id).then(function(elems) {
          $.each(elems, function(idx, elem) {
           $localForage.bind($scope, { key : 'osaData-' + elem.id, scopeKey: 'osaElementKeyframeData[\'' + elem.id + '\']' });
          });
         });
       });
     });
    };

    $scope.createDataAttribute = function(elemDiv, kfData, position, stats) {

      var transforms = '';
      var dataAttr = '';

      $.each($scope.tags, function(idx, item) {
        if (kfData.hasData[item.name]) {
         if (!item.isTransform) {
           dataAttr += item.name + ':' + kfData[item.name] + item.unit + '; ';
         }
         else {
           transforms += item.name + '(' + kfData[item.name] + item.unit + ') ';
         }

         if (!stats.counts[item.name])
           stats.counts[item.name] = 1;
         else
           stats.counts[item.name]++;
        }
      });

      if (transforms.length > 0)
        dataAttr += 'transform:' + transforms + ';';

      elemDiv.attr('data-' + position, dataAttr);
    };

    /* Create the constant attributes and css for an img in the skrollr scene. */
    $scope.createConstants = function(elemDiv, kfData, stats) {
      var transforms = '';
 
      $.each($scope.allTags, function(idx, item) {
         if (kfData.hasData[item.name]) {
            var key = item.name;
            var value = kfData[item.name];

            if (item.isTransform) {
               transforms += item.name + '(' + value + item.unit + ') ';
            }
            else if (item.isAttr) {
               elemDiv.attr(item.name, value);
            }
            else {
               value = value + item.unit;
               elemDiv.css(key, value);
            }

            stats.hasConstant[item.name] = true;
         }

         if (transforms.length > 0)
           elemDiv.css('transform', transforms);
      });
    };

    $scope.realRender = function(scenes) {

      $('#skrollr-container').empty();
      $scope.renderMode = true;

      var rollingScrollPosition = 0;
      var firstScene = true;
      $scope.osaErrors = [];

      $.each(scenes, function(idx, scene) {
        var sceneDiv = $('<div />');
        var sceneStart = rollingScrollPosition;

        sceneDiv.css({ "position" : 'fixed', "width" : '100%', "height" : '100%', "top" : 0, "left" : 0 });
        if (!firstScene) {
          sceneDiv.attr('data-' + (sceneStart - 1), 'opacity:0;');
          sceneDiv.attr('data-' + (sceneStart), 'opacity:1;');
        }
        else {
          firstScene = false;
        }

        $.each($scope.osaElements[scene.id], function(idx, elem) {
          var elemDiv = $('<img />');
          elemDiv.css('position', 'absolute');

          var stats = { "hasConstant" : {}, "counts" : {} };

          $scope.createConstants(elemDiv, $scope.osaElementKeyframeData[elem.id]['c'], stats);

          $.each($scope.osaKeyframes[scene.id], function(idx, kf) {
            var kfData = $scope.osaElementKeyframeData[elem.id][kf.id];
            $scope.createDataAttribute(elemDiv, kfData, kf.position + sceneStart, stats);
            rollingScrollPosition = kf.position + sceneStart;
          });

          $scope.reportErrors(stats, elem, scene);

          sceneDiv.append(elemDiv);
        });

        sceneDiv.attr('data-' + (rollingScrollPosition), 'opacity:1;');
        sceneDiv.attr('data-' + (rollingScrollPosition + 1), 'opacity:0;');
        rollingScrollPosition += 2; /* 1px at start and end. */

        $('#skrollr-container').append(sceneDiv);
      });
      skrollr.get().refresh();
    };

    $scope.reportErrors = function(stats, elem, scene) {

      $.each($scope.allTags, function(idx, tag) {

       if (stats.hasConstant[tag.name] && stats.counts[tag.name])
         $scope.osaErrors.push({
           "text" : 'You have defined a property as a constant as well as in a keyframe. This will not work.',
           "tag" : tag.name,
           "element" : elem.name,
           "scene" : scene.name
         });

       if (stats.counts[tag.name] && stats.counts[tag.name] < 2)
         $scope.osaErrors.push({
           "text" : 'You have defined a property in a single keyframe. Animations run between two or more keyframes so this will not work.',
           "tag" : tag.name,
           "element" : elem.name,
           "scene" : scene.name
         });
      });
    };

    $scope.showErrorsTab = function() {
      $('a[href="#error-menu-tab"]').tab('show');
      $scope.renderMode = false;
    };

    $scope.saveRender = function() {
      $scope.renderMode = false;

      var header = '<' + '!DOCTYPE html>'
      header += '<' + 'html>\n';
      header += '<' + 'head>\n';
      header += '<' + 'title>\n';
      header += $('<div />').text($scope.currentProject.name).html();
      header += '<' + '/title>\n';
      header += '<' + 'script src="skrollr.min.js">' + '<' + '/script>\n';
      header += '<' + '/head>\n';
      header += '<' + 'body>\n';

      footer = '<' + 'script' + '>skrollr.init();' + '<' + '/script>\n';
      footer += '<' + '/body>\n';
      footer += '<' + '/html>\n';

      skrollr.get().destroy();
      var blob = new Blob([header + $('#skrollr-container').html() + footer], {type: "text/html;charset=utf-8"});
      saveAs(blob, $scope.currentProject.name + '.htm');
      skrollr.init();
    };

    $scope.saveJSON = function() {
      $scope.v1SaveJSON();
    };

    $scope.v1SaveJSON = function() {
      var save = { "id" : uuid4.generate(), "version" : 1, "generatedBy" : 'Easy Skrollr Animate',
                   "generatorLink" : 'TODO' };

      save.project = $scope.currentProject;
      save.scenes = $scope.osaScenes[$scope.currentProject.id];
      save.keyframes = {};
      save.elements = {};
      save.kfData = {};

      $.each(save.scenes, function(idx, scene) {
        save.keyframes[scene.id] = $scope.osaKeyframes[scene.id];
        save.elements[scene.id] = $scope.osaElements[scene.id];

        $.each(save.elements[scene.id], function(idx, elem) {
          save.kfData[elem.id] = $scope.osaElementKeyframeData[elem.id];
        });
      });

      var blob = new Blob([angular.toJson(save)], {type: "application/json;charset=utf-8"});
      saveAs(blob, $scope.currentProject.name + '.json');
    };

    $scope.realLoadJSON = function(data) {
      var load = angular.fromJson(data);

      if (!load.generatedBy ||
          load.generatedBy !== 'Easy Skrollr Animate' ||
          load.version !== 1) {
      swal( { "title" : 'Wrong application or version',
              "text" : 'Unfortunately, the file you have provided could not be opened by this version of Easy Skrollr Animate.',
              "showCancelButton" : false,
              "confirmButtonClass" : 'btn-warning',
              "type" : 'warning' });
      }

      $scope.v1LoadJSON(load);
    };

    $scope.v1LoadJSON = function(load) {
      save = {};
      save.project = angular.copy(load.project);
      save.project.id = uuid4.generate();

      /* First we generate new ids for everything to avoid overwriting any existing projects, etc. */
      save.scenes = [];
      save.keyframes = {};
      save.elements = {};
      save.kfData = {};

      $.each(load.scenes, function(idx, scene) {
        var newScene = angular.copy(scene);
        newScene.id = uuid4.generate();

        save.keyframes[newScene.id] = [];
        save.elements[newScene.id] = [];

        $.each(load.keyframes[scene.id], function(idx, kf) {
          var newKf = angular.copy(kf);
          newKf.id = uuid4.generate();
          kf.newId = newKf.id;
          save.keyframes[newScene.id].push(newKf);
        });

        $.each(load.elements[scene.id], function(idx, elem) {
          var newElem = angular.copy(elem);
          newElem.id = uuid4.generate();
          elem.newId = newElem.id;
          save.elements[newScene.id].push(newElem);
        });

        $.each(load.elements[scene.id], function(idx, elem) {
          save.kfData[elem.newId] = {};
          $.each(load.keyframes[scene.id], function(idx, kf) {
            if (load.kfData[elem.id] && load.kfData[elem.id][kf.id]) {
              save.kfData[elem.newId][kf.newId] = angular.copy(load.kfData[elem.id][kf.id]);
              save.kfData[elem.newId][kf.newId].id = uuid4.generate();
            }
          });
        });

        save.scenes.push(newScene);
      });

      $scope.currentKeyframeId = null;
      $scope.currentElement = null;
      $scope.currentScene = null;
      $scope.currentProject = save.project;

      $scope.osaProjects.push(save.project);

      $scope.osaScenes[save.project.id] = save.scenes;
      $localForage.bind($scope, { "key" : 'osaScenes-' + save.project.id, "scopeKey" : 'osaScenes[\'' + save.project.id + '\']' });

      $.each(save.scenes, function(idx, scene) {
        $scope.osaKeyframes[scene.id] = save.keyframes[scene.id];
        $scope.osaElements[scene.id] = save.elements[scene.id];

        $localForage.bind($scope, { "key" : 'osaKeyframes-' + scene.id, "scopeKey" : 'osaKeyframes[\'' + scene.id + '\']' });
        $localForage.bind($scope, { "key" : 'osaElements-' + scene.id, "scopeKey" : 'osaElements[\'' + scene.id + '\']' });

        $.each(save.elements[scene.id], function(idx, elem) {
          $scope.osaElementKeyframeData[elem.id] = save.kfData[elem.id];
          $localForage.bind($scope, { key : 'osaData-' + elem.id, scopeKey: 'osaElementKeyframeData[\'' + elem.id + '\']' });
        });
      });

      $scope.$apply();
    };

    $scope.loadJSON = function() {
      var file = $('#load-file-box')[0].files[0];

      if (!file)
        return;

      var reader = new FileReader();
      reader.onload = function() { $scope.realLoadJSON(this.result); };
      reader.readAsText(file);
    };
  }]);

  skrollr.init();
</script>


</body>
</html>

