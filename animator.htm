<!DOCTYPE html>
<html ng-app="openScrollAnimator" ng-controller="osaController">
<head>
 <title>Open Scroll Animator</title>
 <link rel="stylesheet" type="text/css" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
 <link rel="stylesheet" type="text/css" href="third-party/sweet-alert.css">
 <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
 <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>
 <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular.min.js"></script>

 <script src="third-party/localforage.min.js"></script>
 <script src="third-party/angular-localForage.min.js"></script>
 <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
 <script src="third-party/sortable.js"></script>
 <script src="third-party/angular-uuid4.js"></script>
 <script src="third-party/skrollr.min.js"></script>
 <script src="third-party/sweet-alert.min.js"></script>


 <style>
  div.project-header
  {
    position: fixed;
    width: 2.5em;
    height: 100%;
    background-image: linear-gradient(to right, white, gray);
    padding: 5px;
    opacity: 0.7;
  }

  div.project-header h2
  {
    transform: rotate(90deg);
    width: 100%;
    white-space: nowrap;
    transform-origin: left bottom 0;
    font-size: 1.4em;
  }

  #controls-main
  {
    position:fixed;
    top:0;
    left: 2.5em;
    opacity: 0.7;
  }

  a.create-item
  {
    font-size: 85%;
    color: rgb(128, 10, 20);
  }

  #element-keyframe
  {
    overflow-x: scroll;
    overflow-y: scroll;
    width: 100%;
    position: fixed;
    bottom: 0;
    left: 2.5em;
    min-height: 400px;
    white-space: nowrap;
    opacity: 0.7;
  }

  h4.rot90
  {
    transform: rotate(90deg);
    width: 100%;
    white-space: nowrap;
    transform-origin: left bottom 0;
    font-size: 1.1em;
    padding-left: 5px;
    padding-bottom: 3px;
  }

  div.kf-data
  {
    display: inline-block;
    border: 0px solid gray;
    height: 100%;
    margin: 0 2px 0 2px;
    width: 2em;
  }

  h4.kf-data-expanded
  {
    transform: none !important;
  }

  div.kf-data-expanded
  {
    width: 12em !important;
    border: 1px solid gray !important;
  }

  div.kf-data-expanded > div
  {
    white-space: normal;
  }

  .actual-data
  {
   display:table-cell;
   padding: 5px;
  }

  .tag-cloud a
  {
    font-size: 85%;
    color: rgb(128, 10, 20);
  }

  .actual-data p
  {
    font-size: 85%;
    margin: 0 2px 0 0;
  }

  span.highlight
  {
    color: red !important;
  }

  span.handle
  {
    cursor:move;
  }

  .nowrap-cls
  {
    white-space: nowrap;
  }

  .ptr-cursor
  {
    cursor:pointer;
  }

  .kf-data-item-cls
  {
    width: 80%;
  }

  .increment, .decrement, .destroy-data
  {
    cursor: pointer;
    font-size: 140%;
  }

  .destroy-data
  {
    font-size: 110%;
  }

  #current-scene, #skrollr-container
  {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }

  #current-scene img, #skrollr-container img
  {
    position: absolute;
  }
 </style>
</head>

<body>

<div ng-cloak>
 <div class="project-header">
  <h2>
  <button ng-click="renderSkrollr()" ng-show="currentProject && !renderMode" class="btn btn-primary btn-xs">
   <span class="glyphicon glyphicon-picture"></span> Render
  </button>

  <button ng-click="renderMode = false" ng-show="renderMode" class="btn btn-primary btn-xs">
   <span class="glyphicon glyphicon-edit"></span> Edit
  </button>

  <span ng-show="currentProject">{{currentProject.name}}</span>
  <span ng-hide="currentProject">No project open</span>
  <span ng-show="currentScene">&gt; {{currentScene.name}}</span>
  <span ng-show="currentElement">&gt; {{currentElement.name}}</span>
  </h2>
 </div>

 <div id="controls-main" ng-hide="renderMode">

 <ul class="nav nav-tabs" role="tablist">

  <li class="active">
   <a href="#project-menu-tab" role="tab" data-toggle="tab">
    Projects <span class="badge">{{osaProjects.length}}</span>
   </a>
  </li>

  <li>
   <a href="#scene-menu-tab" role="tab" data-toggle="tab">
    Scenes <span class="badge">{{currentProject ? osaScenes[currentProject.id].length : 0}}
   </a>
  </li>

  <li>
   <a href="#keyframe-menu-tab" role="tab" data-toggle="tab">
    Keyframes <span class="badge">{{currentScene ? osaKeyframes[currentScene.id].length : 0}}</span>
   </a>
  </li>

  <li>
   <a href="#element-menu-tab" role="tab" data-toggle="tab">
    Images <span class="badge">{{currentScene ? osaElements[currentScene.id].length : 0}}</span>
   </a>
  </li>

  <li>
   <a href="#about-menu-tab" role="tab" data-toggle="tab">
    About / Help
   </a>
  </li>

 </ul>

 <div class="tab-content">

 <div class="tab-pane active" id="project-menu-tab">

 <div id="project-menu">

  <table class="table table-condensed table-bordered table-striped">

  <tbody>
    <tr><th>Order</th><th>Name</th><th>Load</th><th>Delete</th></tr>
  </tbody>

  <tbody ui-sortable="{ handle : '.handle' }" ng-model="osaProjects">
   <tr ng-repeat="pject in osaProjects">
     <td><span class="handle"><span class="glyphicon glyphicon-sort"></span></span></td>
     <td><input type="text" ng-model="pject.name" placeholder="Project Name"></td>
     <td><button class="btn btn-sm btn-success" ng-click="loadProject(pject)">Load</button></td>
     <td><button class="btn btn-sm btn-danger" ng-click="deleteProject($index, pject.id)">Delete</button></td>
   </tr>
  </tbody>

  <tbody>
    <tr><td colspan="4"><a href="#" class="create-item" ng-click="createProject()">Create project here</a></td></tr>
  </tbody>
  </table>
 </div>

 </div><!-- End project menu tab -->

  <div class="tab-pane" id="scene-menu-tab">

  <div id="scene-menu">

  <table class="table table-condensed table-bordered table-striped">

  <tbody>
    <tr><th>Order</th><th>Name</th><th>Load</th><th>Delete</th></tr>
  </tbody>

  <tbody ui-sortable="{ handle : '.handle' }" ng-model="osaScenes[currentProject.id]">
   <tr ng-repeat="scene in osaScenes[currentProject.id]">
     <td><span class="handle"><span class="glyphicon glyphicon-sort"></span></span></td>
     <td><input type="text" ng-model="scene.name" placeholder="Scene Name"></td>
     <td><button class="btn btn-sm btn-success" ng-click="loadScene(scene)">Load</button></td>
     <td><button class="btn btn-sm btn-danger" ng-click="deleteScene($index, scene.id)">Delete</button></td>
   </tr>
  </tbody>

  <tbody>
    <tr ng-show="currentProject"><td colspan="4"><a href="#" class="create-item" ng-click="createScene()">Create scene here</a></td></tr>
    <tr ng-hide="currentProject"><td colspan="4">Please load a project to view &amp; create scenes</td></tr>
  </tbody>
  </table>
 </div>

  </div><!-- End scene menu tab -->

  <div class="tab-pane" id="keyframe-menu-tab">

  <div id="keyframe-menu">

  <table class="table table-condensed table-bordered table-striped">

  <tbody>
    <tr><th>Order</th><th>Name</th><th>Position</th><th>Delete</th></tr>
  </tbody>

  <tbody ui-sortable="{ handle : '.handle' }" ng-model="osaKeyframes[currentScene.id]">
   <tr ng-repeat="kf in osaKeyframes[currentScene.id]">
     <td><span class="handle"><span class="glyphicon glyphicon-sort"></span></span></td>
     <td><input type="text" ng-model="kf.name" placeholder="Keyframe name"></td>
     <td><input type="number" min="0" ng-model="kf.position" placeholder="Keyframe scroll position"></td>
     <td><button class="btn btn-sm btn-danger" ng-click="deleteKeyframe($index, kf.id)">Delete</button></td>
   </tr>
  </tbody>

  <tbody>
    <tr ng-show="currentScene"><td colspan="4"><a href="#" class="create-item" ng-click="createKeyframe()">Create keyframe here</a></td></tr>
    <tr ng-hide="currentScene"><td colspan="4">Please load a scene to view &amp; create keyframes</td></tr>
  </tbody>
  </table>
 </div>

  </div><!-- End keyframe menu tab -->

  <div class="tab-pane" id="element-menu-tab">

  <div id="element-menu">

  <table class="table table-condensed table-bordered table-striped">

  <tbody>
    <tr><th>Order</th><th>Name</th><th>Load</th><th>Delete</th></tr>
  </tbody>

  <tbody ui-sortable="{ handle : '.handle' }" ng-model="osaElements[currentScene.id]">
   <tr ng-repeat="elem in osaElements[currentScene.id]">
     <td><span class="handle"><span class="glyphicon glyphicon-sort"></span></span></td>
     <td><input type="text" ng-model="elem.name" placeholder="Image name"></td>
     <td><button class="btn btn-sm btn-success" ng-click="loadElement(elem)">Load</button></td>
     <td><button class="btn btn-sm btn-danger" ng-click="deleteElement($index, elem.id)">Delete</button></td>
   </tr>
  </tbody>

  <tbody>
    <tr ng-show="currentScene"><td colspan="4"><a href="#" class="create-item" ng-click="createElement()">Create image here</a></td></tr>
    <tr ng-hide="currentScene"><td colspan="4">Please load a scene to view &amp; create images</td></tr>
  </tbody>
  </table>
 </div>

  </div><!-- End element menu tab -->

  <div class="tab-pane" id="about-menu-tab">
  <div id="about-menu">

  </div>
  </div><!-- End about menu tab -->

</div><!-- End tab content -->
</div><!-- End controls-main -->

<div id="element-keyframe" ng-show="currentElement && !renderMode">
 <div class="kf-data" ng-class="{ 'kf-data-expanded' : osaElementKeyframeData[currentElement.id]['c'].isOpen }">

  <h4 class="rot90" ng-class="{ 'kf-data-expanded' : osaElementKeyframeData[currentElement.id]['c'].isOpen }">
    <span ng-click="applyStyles('c')" ng-class="{ highlight : currentKeyframeId == 'c' }" class="glyphicon glyphicon-search ptr-cursor"></span>
    <a href="#" ng-click="createData('c')">Constants</a>
  </h4>

  <div class="actual-data" ng-show="osaElementKeyframeData[currentElement.id]['c'].isOpen">
   <span class="tag-cloud">
     <span ng-repeat="tag in tags">
     <a ng-hide="osaElementKeyframeData[currentElement.id]['c'].hasData[tag.name]"
        ng-click="osaElementKeyframeData[currentElement.id]['c'].hasData[tag.name] = true"
        href="#">{{tag.name}}</a>
     </span>
     <span ng-repeat="tag in constants">
     <a ng-hide="osaElementKeyframeData[currentElement.id]['c'].hasData[tag.name]"
        ng-click="osaElementKeyframeData[currentElement.id]['c'].hasData[tag.name] = true"
        href="#">{{tag.name}}</a>
     </span>
   </span>

   <span ng-repeat="tag in tags">
     <p ng-show="osaElementKeyframeData[currentElement.id]['c'].hasData[tag.name]">{{tag.placeholder}}</p>
     <p class="nowrap-cls" ng-show="osaElementKeyframeData[currentElement.id]['c'].hasData[tag.name]">

        <input class="kf-data-item-cls"
               type="number"
               min="{{tag.min}}"
               max="{{tag.max}}"
               step="{{tag.step ? tag.step : 1}}"
               ng-model="osaElementKeyframeData[currentElement.id]['c'][tag.name]"
               placeholder="{{tag.placeholder}}"
               ng-change="applyStyles('c')">

        <span class="destroy-data" ng-click="destroyData('c', tag)">&times;</span>
     </p>
   </span>
   <span ng-repeat="tag in constants">
     <p ng-show="osaElementKeyframeData[currentElement.id]['c'].hasData[tag.name]">{{tag.placeholder}}</p>
     <p class="nowrap-cls" ng-show="osaElementKeyframeData[currentElement.id]['c'].hasData[tag.name]">

        <input class="kf-data-item-cls"
               type="text"
               ng-model="osaElementKeyframeData[currentElement.id]['c'][tag.name]"
               placeholder="{{tag.placeholder}}"
               ng-blur="applyStyles('c')">

        <span class="destroy-data" ng-click="destroyData('c', tag)">&times;</span>
     </p>
   </span>
  </div>
 </div><!-- End kf-data item -->

 <div class="kf-data" ng-repeat="kf in osaKeyframes[currentScene.id]" ng-class="{ 'kf-data-expanded' : osaElementKeyframeData[currentElement.id][kf.id].isOpen }">

  <h4 class="rot90" ng-class="{ 'kf-data-expanded' : osaElementKeyframeData[currentElement.id][kf.id].isOpen }">
    <span ng-click="applyStyles(kf.id)" ng-class="{ highlight : currentKeyframeId == kf.id }" class="glyphicon glyphicon-search ptr-cursor"></span>
    <a href="#" ng-click="createData(kf.id)">{{kf.name}} @ {{kf.position}}</a>
  </h4>

  <div class="actual-data" ng-show="osaElementKeyframeData[currentElement.id][kf.id].isOpen">
   <span class="tag-cloud">
     <span ng-repeat="tag in tags">
     <a ng-hide="osaElementKeyframeData[currentElement.id][kf.id].hasData[tag.name]"
        ng-click="osaElementKeyframeData[currentElement.id][kf.id].hasData[tag.name] = true"
        href="#">{{tag.name}}</a>
     </span>
   </span>

   <span ng-repeat="tag in tags">
     <p ng-show="osaElementKeyframeData[currentElement.id][kf.id].hasData[tag.name]">{{tag.placeholder}}</p>
     <p class="nowrap-cls" ng-show="osaElementKeyframeData[currentElement.id][kf.id].hasData[tag.name]">
       <input class="kf-data-item-cls"
              type="number"
              min="{{tag.min}}"
              max="{{tag.max}}"
              step="{{tag.step ? tag.step : 1}}"
              ng-model="osaElementKeyframeData[currentElement.id][kf.id][tag.name]"
              placeholder="{{tag.placeholder}}"
              ng-change="applyStyles(kf.id)">

       <span class="destroy-data" ng-click="destroyData(kf.id, tag)">&times;</span>
     </p>
   </span>
  </div>
 </div><!-- End kf-data item -->
</div><!-- End element-keyframe content -->

 <div id="current-scene" ng-hide="renderMode">
  <img ng-repeat="elem in osaElements[currentScene.id]" id="{{elem.id}}">
 </div>

 <div id="skrollr-container" ng-show="renderMode"></div>
<script>
/*
TODO:
1. Proper deleting of related items.
4. Saving resulting file.
5. Split js to separate file.
6. Testing.
13. Make sure scroll of projects, scenes, etc works, when exceeding maximum height of page.
14. Validation that all set properties are contained in at least two keyframes.
15. Validation that constants are not contained in any other keyframe.
16. Render scenes properly.
*/

  var app = angular.module('openScrollAnimator', ['LocalForageModule', 'ui.sortable', 'uuid4']);

  app.controller('osaController', ['$scope', '$q', '$localForage', 'uuid4', function($scope, $q, $localForage, uuid4) {

    $scope.osaProjects = [];
    $scope.osaScenes = [];
    $scope.osaKeyframes = [];
    $scope.osaElements = [];
    $scope.osaElementKeyframeData = [];

    $scope.tags = [
      { "name" : 'top', "placeholder" : 'Top (px)', "unit" : 'px' },
      { "name" : 'left', "placeholder" : 'Left (px)', "unit" : 'px' },
      { "name" : 'width', "placeholder" : 'Width (px)', "unit" : 'px' },
      { "name" : 'height', "placeholder" : 'Height (px)', "unit" : 'px' },
      { "name" : 'opacity', "placeholder" : 'Opacity (0.0 to 1.0)', "unit" : '', "min" : 0, "max" : 1, "step" : 0.1 },
      { "name" : 'rotate', "placeholder" : 'Rotate (deg)', "unit" : 'deg', "isTransform" : true },
      { "name" : 'skewX', "placeholder" : 'Skew X (deg)', "unit" : 'deg', "isTransform" : true },
      { "name" : 'skewY', "placeholder" : 'Skew Y (deg)', "unit" : 'deg', "isTransform" : true },
    ];

    $scope.constants = [
      { "name" : 'src', "placeholder" : 'Image Src (url)', inc : null, "unit" : '', "isAttr" : true },
      { "name" : 'alt', "placeholder" : 'Image Alt Text', inc : null, "unit" : '', "isAttr" : true }
    ];

    $scope.allTags = $scope.tags.concat($scope.constants);

    $scope.renderMode = false;

    $scope.currentProject = null;
    $scope.currentScene = null;
    $scope.currentElement = null;
    $scope.currentKeyframeId = null;

    $localForage.bind($scope, 'osaProjects');

    $scope.deleteProject = function(idx, id) {
      swal( { "title" : 'Delete Project Confirmation',
              "text" : 'Are you sure you wish to delete an entire project?',
              "showCancelButton" : true,
              "confirmButtonClass" : 'btn-danger',
              "type" : 'warning' }, function() {
        if ($scope.osaProjects[idx].id === id) /* Sanity test. */ {
          $scope.osaProjects.splice(idx, 1);
          $scope.$apply(); /* This seems to be needed. */
        }
      });
    };

    $scope.createProject = function() {
      $scope.osaProjects.push({ "id" : uuid4.generate() });
    };

    $scope.loadProject = function(project) {
      $scope.currentKeyframeId = null;
      $scope.currentElement = null;
      $scope.currentScene = null;
      $scope.currentProject = project;
      $scope.osaScenes[$scope.currentProject.id] = [];
      $localForage.bind($scope, { key : 'osaScenes-' + $scope.currentProject.id, scopeKey: 'osaScenes[\'' + $scope.currentProject.id + '\']' });
    };

    $scope.createScene = function() {
      $scope.osaScenes[$scope.currentProject.id].push({ "id" : uuid4.generate() });
    };

    $scope.deleteScene = function(idx, id) {
      swal( { "title" : 'Delete Scene Confirmation',
              "text" : 'Are you sure you wish to delete an entire scene?',
              "showCancelButton" : true,
              "confirmButtonClass" : 'btn-danger',
              "type" : 'warning' }, function() {
        if ($scope.osaScenes[$scope.currentProject.id][idx].id === id) {
          $scope.osaScenes[$scope.currentProject.id].splice(idx, 1);
          $scope.$apply();
        }
     });
    };

    $scope.loadScene = function(scene) {
      $scope.currentKeyframeId = null;
      $scope.currentElement = null;
      $scope.currentScene = scene;
      $scope.osaKeyframes[$scope.currentScene.id] = [];
      $scope.osaElements[$scope.currentScene.id] = [];
      $localForage.bind($scope, { key : 'osaKeyframes-' + $scope.currentScene.id, scopeKey: 'osaKeyframes[\'' + $scope.currentScene.id + '\']' });
      $localForage.bind($scope, { key : 'osaElements-' + $scope.currentScene.id, scopeKey: 'osaElements[\'' + $scope.currentScene.id + '\']' });

      $localForage.getItem('osaElements-' + $scope.currentScene.id).then( function(elems) {
        if (elems) {
          $.each(elems, function(idx, elem) {
            $localForage.bind($scope, { key : 'osaData-' + elem.id, scopeKey: 'osaElementKeyframeData[\'' + elem.id + '\']' });
          });
        }
      });
    };

    $scope.createKeyframe = function() {
      $scope.osaKeyframes[$scope.currentScene.id].push({ "id" : uuid4.generate() });
    };

    $scope.deleteKeyframe = function(idx, id) {
      swal( { "title" : 'Delete Keyframe Confirmation',
              "text" : 'Are you sure you wish to delete this keyframe?',
              "showCancelButton" : true,
              "confirmButtonClass" : 'btn-danger',
              "type" : 'warning' }, function() {
        if ($scope.osaKeyframes[$scope.currentScene.id][idx].id === id) {
          $scope.osaKeyframes[$scope.currentScene.id].splice(idx, 1);
          $scope.$apply();
        }
      });
    };

    $scope.createElement = function() {
      var id = uuid4.generate();
      $scope.osaElements[$scope.currentScene.id].push({ "id" : id });
      $scope.osaElementKeyframeData[id] = {};
      $localForage.bind($scope, { key : 'osaData-' + id, scopeKey: 'osaElementKeyframeData[\'' + id + '\']' });
    };

    $scope.deleteElement = function(idx, id) {
      swal( { "title" : 'Delete Image Confirmation',
              "text" : 'Are you sure you wish to delete this image?',
              "showCancelButton" : true,
              "confirmButtonClass" : 'btn-danger',
              "type" : 'warning' }, function() {
        if ($scope.osaElements[$scope.currentScene.id][idx].id === id) {
          $scope.osaElements[$scope.currentScene.id].splice(idx, 1);
          $scope.$apply();
        }
      });
    };

    $scope.loadElement = function(elem) {
      $scope.currentElement = elem;
      $localForage.bind($scope, { key : 'osaData-' + $scope.currentElement.id, scopeKey: 'osaElementKeyframeData[\'' + $scope.currentElement.id + '\']' });
    };

    $scope.createData = function(kfId) {
     if (angular.isDefined($scope.osaElementKeyframeData[$scope.currentElement.id][kfId])) {
         $scope.osaElementKeyframeData[$scope.currentElement.id][kfId].isOpen = !$scope.osaElementKeyframeData[$scope.currentElement.id][kfId].isOpen;
     }
     else {
       $scope.osaElementKeyframeData[$scope.currentElement.id][kfId] = { "id" : uuid4.generate(), "hasData" : {}, "isOpen" : true };
     }
    };

    $scope.incDataItem = function(kfId, tag) {
      $scope.osaElementKeyframeData[$scope.currentElement.id][kfId][tag.name] = Math.round((parseFloat($scope.osaElementKeyframeData[$scope.currentElement.id][kfId][tag.name]) + tag.inc) * 1000) / 1000;
      $scope.applyStyles(kfId);
    };

    $scope.decDataItem = function(kfId, tag) {
      $scope.osaElementKeyframeData[$scope.currentElement.id][kfId][tag.name] = Math.round((parseFloat($scope.osaElementKeyframeData[$scope.currentElement.id][kfId][tag.name]) - tag.inc)  * 1000) / 1000;
      $scope.applyStyles(kfId);
    };

    $scope.destroyData = function(kfId, tag) {
      $scope.osaElementKeyframeData[$scope.currentElement.id][kfId].hasData[tag.name] = false;
      $scope.applyStyles(kfId);
    };

    $scope.applyStylesInternal = function(elem, kfId, kkfId, item, transforms) {

          if (angular.isDefined($scope.osaElementKeyframeData[elem.id][kfId]) &&
              $scope.osaElementKeyframeData[elem.id][kfId].hasData[item.name]) {
            var key = item.name;
            var value = $scope.osaElementKeyframeData[elem.id][kfId][item.name];

            if (item.isTransform) {
               transforms += item.name + '(' + value + item.unit + ') ';
            }
            else if (item.isAttr) {
               $('#' + elem.id).attr(item.name, value);
            }
            else {
               value = value + item.unit;
               $('#' + elem.id).css(key, value);
            }
          }

          return transforms;
    };


    $scope.applyStyles = function(kfId /* Which keyframe to stop at? */) {

      $scope.currentKeyframeId = kfId;

      /* First clear existing styles and attributes. */
      $.each($scope.osaElements[$scope.currentScene.id], function(idx, elem) {
       $.each($scope.allTags, function(idx, item) {
         if (item.isTransform)
          $('#' + elem.id).css('transform', '');
         else if (item.isAttr)
          $('#' + elem.id).attr(item.name, '');
         else
          $('#' + elem.id).css(item.name, '');
       });
      });

      /* Then loop through all the elements in the scene. */
      $.each($scope.osaElements[$scope.currentScene.id], function(idx, elem) {

        /* Apply the constant styles first. */
        $.each($scope.allTags, function(idx, item) {
          $scope.applyStylesInternal(elem, 'c', 'c', item);
        });

        if (kfId != 'c')
        {
         /* Apply the styles for other keyframes, stopping at kfId. */
         $.each($scope.osaKeyframes[$scope.currentScene.id], function(idx, kkf) {
          var transforms = '';
          $.each($scope.allTags, function(idx, item) {
            transforms = $scope.applyStylesInternal(elem, kkf.id, kfId, item, transforms);
          });

         if (transforms.length > 0)
           $('#' + elem.id).css('transform', transforms);

          if (kkf.id == kfId)
           return false;
         });
        }
      });
    };

    /* This function loads all the data into memory and then calls realRender. */
    $scope.renderSkrollr = function() {

       var scenes = [];

       var promises = [];

       /* First iterate over all the scenes in the project. */
       $.each($scope.osaScenes[$scope.currentProject.id], function(idx, scene) {
         var sceneSaved = { "id" : scene.id, "elements" : [], "keyframes" : [] };
         scenes.push(sceneSaved);

         /* Start loading the elements for the scene. */
         var promise = $localForage.getItem('osaElements-' + scene.id).then(function(elems) {
          $.each(elems, function(idx, elem) {
            sceneSaved.elements.push(elem);
          });
         });

         promises.push(promise);

         /* Start loading the keyframes for the scene. */
         var promise2 = $localForage.getItem('osaKeyframes-' + scene.id).then(function(elems) {
          $.each(elems, function(idx, kf) {
            sceneSaved.keyframes.push(kf);
          });
         });

         promises.push(promise2);
       });

       $q.all(promises).then(function() {
         var promises2 = [];
         /* So now all the scenes, with their elements and keyframes are loaded.
          * We then get all the element keyframe data. */
         $.each(scenes, function(idx, scene) {
          $.each(scene.elements, function(idx, elem) {
           var promise3 = $localForage.getItem('osaData-' + elem.id).then(function(elemKfData) {
             elem.kfData = elemKfData;
           });
           promises2.push(promise3);
          });
        });
        $q.all(promises2).then(function() { $scope.realRender(scenes); });
      });
    };

    $scope.createDataAttribute = function(elemDiv, kfData, position) {

      var transforms = '';
      var dataAttr = '';

      $.each($scope.tags, function(idx, item) {
        if (kfData.hasData[item.name]) {
         if (!item.isTransform) {
           dataAttr += item.name + ':' + kfData[item.name] + item.unit + '; ';
         }
         else {
           transforms += item.name + '(' + kfData[item.name] + item.unit + ') ';
         }
        }
      });

      if (transforms.length > 0)
        dataAttr += 'transform:' + transforms + ';';

      elemDiv.attr('data-' + position, dataAttr);
    };

    /* Create the constant attributes and css for an img in the skrollr scene. */
    $scope.createConstants = function(elemDiv, kfData) {
      var transforms = '';

      $.each($scope.allTags, function(idx, item) {
         if (kfData.hasData[item.name]) {
            var key = item.name;
            var value = kfData[item.name];

            if (item.isTransform) {
               transforms += item.name + '(' + value + item.unit + ') ';
            }
            else if (item.isAttr) {
               elemDiv.attr(item.name, value);
            }
            else {
               value = value + item.unit;
               elemDiv.css(key, value);
            }
          }

         if (transforms.length > 0)
           elemDiv.css('transform', transforms);
      });
    };

    $scope.realRender = function(scenes) {

      $('#skrollr-container').empty();
      $scope.renderMode = true;

      var rollingScrollPosition = 1;

      $.each(scenes, function(idx, scene) {
        var sceneDiv = $('<div />');
        var sceneStart = rollingScrollPosition;

        sceneDiv.css({ "position" : 'fixed', "width" : '100%', "height" : '100%', "top" : 0, "left" : 0 });
        sceneDiv.attr('data-' + (sceneStart - 1), 'opacity:0;');
        sceneDiv.attr('data-' + (sceneStart), 'opacity:1;');

        $.each(scene.elements, function(idx, elem) {
          var elemDiv = $('<img />');

          if (elem.kfData && elem.kfData['c']) {
            $scope.createConstants(elemDiv, elem.kfData['c']);
          }

          $.each(scene.keyframes, function(idx, kf) {
            if (elem.kfData && elem.kfData[kf.id]) {
              var kfData = elem.kfData[kf.id];
              $scope.createDataAttribute(elemDiv, kfData, kf.position + sceneStart);
            }
            rollingScrollPosition = kf.position + sceneStart;
          });

          sceneDiv.append(elemDiv);
        });

        sceneDiv.attr('data-' + (rollingScrollPosition), 'opacity:1;');
        sceneDiv.attr('data-' + (rollingScrollPosition + 1), 'opacity:0;');
        rollingScrollPosition += 2; /* 1px at start and end. */

        $('#skrollr-container').append(sceneDiv);
      });
      skrollr.get().refresh();
    };
  }]);

  skrollr.init();
</script>


</body>
</html>

